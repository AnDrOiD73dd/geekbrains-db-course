# Установка PostgreSQL
# Производилась на виртуалке с Ubuntu 18.04
root@MySQL8:~# sudo vim /etc/apt/sources.list.d/pgdg.list
# Вставляем в файл строку: 
# deb http://apt.postgresql.org/pub/repos/apt/ bionic-pgdg main
root@MySQL8:~# wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
root@MySQL8:~# sudo apt-get update
root@MySQL8:~# apt-get install postgresql-11
# Проверяем 
root@MySQL8:~# sudo -i -u postgres
postgres@MySQL8:~# psql

----------------------------------------------------------------------------------------------------------------

# Установка Sphinx
# Установка производилась по статье https://www.8host.com/blog/ustanovka-i-nastrojka-sphinx-v-ubuntu-16-04/
# Но на Ubuntu 18.04
# на ней не оказалсоь пакета sphinxsearch, был sphinx-common, но это не то. Как итог - не завелось.
# Попробовал на нашей виртуалке с Debian

root@MySQL8:~# sudo apt-get install sphinxsearch
Чтение списков пакетов… Готово
Построение дерева зависимостей       
Чтение информации о состоянии… Готово
Будут установлены следующие дополнительные пакеты:
  libstemmer0d
НОВЫЕ пакеты, которые будут установлены:
  libstemmer0d sphinxsearch
обновлено 0, установлено 2 новых пакетов, для удаления отмечено 0 пакетов, и 156 пакетов не обновлено.
Необходимо скачать 2 005 kБ архивов.
После данной операции, объём занятого дискового пространства возрастёт на 17,6 MB.
Хотите продолжить? [Д/н] 
Пол:1 http://mirror.yandex.ru/debian stretch/main amd64 libstemmer0d amd64 0+svn585-1+b2 [63,3 kB]
Пол:2 http://mirror.yandex.ru/debian stretch/main amd64 sphinxsearch amd64 2.2.11-1.1 [1 941 kB]
Получено 2 005 kБ за 0с (18,7 MБ/c)      
Выбор ранее не выбранного пакета libstemmer0d:amd64.
(Чтение базы данных … на данный момент установлено 142978 файлов и каталогов.)
Подготовка к распаковке …/libstemmer0d_0+svn585-1+b2_amd64.deb …
Распаковывается libstemmer0d:amd64 (0+svn585-1+b2) …
Выбор ранее не выбранного пакета sphinxsearch.
Подготовка к распаковке …/sphinxsearch_2.2.11-1.1_amd64.deb …
Распаковывается sphinxsearch (2.2.11-1.1) …
Настраивается пакет libstemmer0d:amd64 (0+svn585-1+b2) …
Обрабатываются триггеры для libc-bin (2.24-11+deb9u3) …
Обрабатываются триггеры для systemd (232-25+deb9u6) …
Настраивается пакет sphinxsearch (2.2.11-1.1) …
Добавляется системный пользователь «sphinxsearch» (UID 119) ...
Добавляется новая группа «sphinxsearch» (GID 124) ...
Добавляется новый пользователь «sphinxsearch» (UID 119) в группу «sphinxsearch» ...
Не создаётся домашний каталог «/var/run/sphinxsearch».
Обрабатываются триггеры для man-db (2.7.6.1-2) …
Обрабатываются триггеры для systemd (232-25+deb9u6) …
root@MySQL8:~# mysql -u root -p

mysql> CREATE DATABASE test;
Query OK, 1 row affected (0,09 sec)

mysql> SOURCE /etc/sphinxsearch/example.sql;
Query OK, 0 rows affected, 1 warning (0,00 sec)

Query OK, 0 rows affected (0,07 sec)

Query OK, 4 rows affected (0,01 sec)
Records: 4  Duplicates: 0  Warnings: 0

Query OK, 0 rows affected, 1 warning (0,02 sec)

Query OK, 0 rows affected (0,07 sec)

Query OK, 10 rows affected (0,00 sec)
Records: 10  Duplicates: 0  Warnings: 0

mysql> use test;

mysql> SHOW TABLES;
+----------------+
| Tables_in_test |
+----------------+
| documents      |
| tags           |
+----------------+
2 rows in set (0,00 sec)

## Редактируем конфиг как написано в статье, меняем пароль
root@MySQL8:~# sudo vim /etc/sphinxsearch/sphinx.conf
root@MySQL8:~# sudo indexer --all
Sphinx 2.2.11-id64-release (95ae9a6)
Copyright (c) 2001-2016, Andrew Aksyonoff
Copyright (c) 2008-2016, Sphinx Technologies Inc (http://sphinxsearch.com)

using config file '/etc/sphinxsearch/sphinx.conf'...
indexing index 'test1'...
collected 4 docs, 0.0 MB
sorted 0.0 Mhits, 100.0% done
total 4 docs, 193 bytes
total 0.014 sec, 13021 bytes/sec, 269.86 docs/sec
total 4 reads, 0.000 sec, 0.1 kb/call avg, 0.0 msec/call avg
total 12 writes, 0.000 sec, 0.1 kb/call avg, 0.0 msec/call avg

# Я не стал выполнять команду crontab -e т.к. нам не нужно сейчас настраивать расписание для обновления индекса

root@MySQL8:~# sudo sed -i 's/START=no/START=yes/g' /etc/default/sphinxsearch
root@MySQL8:~# sudo /etc/init.d/sphinxsearch start
Starting sphinxsearch: Sphinx 2.2.11-id64-release (95ae9a6)
Copyright (c) 2001-2016, Andrew Aksyonoff
Copyright (c) 2008-2016, Sphinx Technologies Inc (http://sphinxsearch.com)

using config file '/etc/sphinxsearch/sphinx.conf'...
listening on all interfaces, port=9312
listening on all interfaces, port=9306
precaching index 'test1'
precached 1 indexes in 0.001 sec                            
sphinxsearch.
root@MySQL8:~# mysql -h0 -P9306
ERROR 2000 (HY000): Unknown MySQL error

# К сожалению, последняя команда выполнилась неудачно и не получается зайти в SphinxQL чтобы выполнить запросы к БД. Google не смог помочь.


----------------------------------------------------------------------------------------------------------------

# Теперь задача из 7-го урока
#Задача 1. У вас есть социальная сеть, где пользователи (id, имя) могут ставить друг другу лайки. Создайте необходимые таблицы для хранения данной информации. Создайте запрос, который выведет информацию:
#id пользователя;
#имя;
#лайков получено;
#лайков поставлено;
#взаимные лайки.
#Задача 2. Для структуры из задачи 1 выведите список всех пользователей, которые поставили лайк пользователям A и B (id задайте произвольно), но при этом не поставили лайк пользователю C.
#Задача 3. Добавим сущности «Фотография» и «Комментарии к фотографии». Нужно создать функционал для пользователей, который позволяет ставить лайки не только пользователям, но и фото или комментариям к фото. Учитывайте следующие ограничения:
#пользователь не может дважды лайкнуть одну и ту же сущность;
#пользователь имеет право отозвать лайк;
#необходимо иметь возможность считать число полученных сущностью лайков и выводить список пользователей, поставивших лайки;
#в будущем могут появиться новые виды сущностей, которые можно лайкать.

# Create DB
CREATE SCHEMA IF NOT EXISTS `lesson7` CHARSET utf8mb4 COLLATE utf8mb4_unicode_ci;
# выбираем схему lesson7
USE `lesson7`;

# создаем таблицу users в выбранной схеме
CREATE TABLE IF NOT EXISTS `users` (
`id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
`name` VARCHAR(40) NOT NULL
);

INSERT INTO `users` (`name`) 
VALUES 
('Василий Петров'), 
('Алексей Хитров'), 
('Ольга Иванова'), 
('Наталья Полонская'), 
('Дмитрий Бургомистров'), 
('Вадим Чепыгин'), 
('Андрей Васильев'), 
('Петр Новиков');


# создаем таблицу-справочник с типами объектов
CREATE TABLE IF NOT EXISTS `instance_types` (
`id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
`name` VARCHAR(40) NOT NULL
);

INSERT INTO `instance_types` (`name`) 
VALUES
('User'), ('Comment'), ('Photo'), ('Photo comment');

# создаем таблицу лайков
CREATE TABLE IF NOT EXISTS `likes` (
`id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
`from` INT NOT NULL,
`to` INT NOT NULL,
`instance_type_id` INT NOT NULL,
`date_time` DATETIME NOT NULL, 
UNIQUE KEY(`from`,`to`,`instance_type_id`),
CONSTRAINT `fk_user_from`
FOREIGN KEY (`from`) REFERENCES `users` (`id`) ON DELETE RESTRICT ON UPDATE CASCADE,
CONSTRAINT `fk_instance_types`
FOREIGN KEY (`instance_type_id`) REFERENCES `instance_types` (`id`) ON DELETE RESTRICT ON UPDATE CASCADE
);

INSERT INTO `likes` (`from`, `to`, `instance_type_id`, `date_time`) 
VALUES
(1, 2, 1, CURDATE()), 
(1, 3, 1, CURDATE()),
(2, 1, 1, CURDATE()), 
(3, 1, 1, CURDATE()), 
(3, 4, 1, CURDATE()), 
(3, 5, 1, CURDATE()),
(3, 6, 1, CURDATE()), 
(4, 3, 1, CURDATE()), 
(4, 5, 1, CURDATE()), 
(5, 1, 1, CURDATE()),
(5, 4, 1, CURDATE());

## Предположим, что мы хотим получить информацию о пользователе с id = 1
SELECT DISTINCT `users`.`id`, `users`.`name`,
(SELECT COUNT(*) FROM `likes` WHERE `likes`.`from` = 1) AS `sent_likes`,
(SELECT COUNT(*) FROM `likes` WHERE `instance_type_id` = (SELECT `id` FROM `instance_types` WHERE `name` = 'User') AND `to` = 1) AS `received_likes`,
(SELECT COUNT(*) FROM `likes` WHERE `from` IN (SELECT `to` FROM `likes` WHERE `from` = 1) AND `to` = 1 AND `instance_type_id` = (SELECT `id` FROM `instance_types` WHERE `name` = 'User')) AS `mutual_likes`
FROM `likes` 
LEFT JOIN `users`
ON `users`.`id` = `likes`.`from`
WHERE `likes`.`from` = 1;

## Пользователи, которые поставили лайк пользователям 1 и 4 и НЕ ставили лайк пользователю 5
SELECT DISTINCT `users`.`id`, `users`.`name` 
FROM `likes` 
LEFT JOIN `users`
ON `users`.`id` = `likes`.`from`
WHERE 
`from` IN (SELECT DISTINCT `from` FROM `likes` WHERE `to` = 4 AND `from` IN (SELECT `from` FROM `likes` WHERE `to` = 1))
AND
`from` NOT IN (SELECT DISTINCT `from` FROM `likes` WHERE `from` IN (SELECT `from` FROM `likes` WHERE `to` = 5))
AND
`instance_type_id` = (SELECT `id` FROM `instance_types` WHERE `name` = 'User');

## Для соблюдения остальных критериев задачи: в поле `to` можно записать ID любой сущности. Для того, чтобы понимать какая именно это сущность - есть поле `instance_type_id`.
## Поэтому при добавлении новых сущностей не должно возникнуть каких-либо проблем
## То, что пользователь не может лайкнуть одну и ту же сущность дважды проверяется самой БД благодаря наличию составного UNIQUE ключа
## То, что можно считать полученные и поставленные лайки - продемонстрировано в первом запросе
## Отзыв лайка выполняется простым запросом на удаление записи из таблицы `likes`
